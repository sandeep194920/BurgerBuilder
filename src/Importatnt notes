** This is some notes I've made while coding along. 

Set 1 Workflow as follows:

1. Initial videos show how to setup the structure. Initially, everything will be div and we replace one by one with component
2. In video 159, he shows how to convert JS object to array. I've modified a little bit but the concept is same.
  * Doubt I have in this concept of conversion : He uses [...Array(some length)].map(........)
  * Here I see [...Array(lenght)] creates [-,-,-] empty spaces and maps though this, fills the spaces with content and 
    then returns it. But I tried doing - new Array(length).map() and it didn't work. But I see even this creates 
    empty spaces like this [-,-,-].  I will answer this below if I find it.
Commit (0cf0fa5) - added functionality to convert object to array in burger to pass it tâ€¦
3. In video 160, in the process of flattening the array, I used .flat() but he used reduce function. Both are right, but learn this, it might be useful.
4. To know a bit about css flexbox - https://www.youtube.com/watch?v=JJSoEo8JSnc
   Flex box is best way to design grid css. 
5. Now we are building BuildControls (which includes BuildControl) component.

To summarize workflow till here: 

Set 1 Workflow summary:

* Project structure created with create-react-app
* Added font (open-sans)
* Created components and containers folders
* Layout was created and App component holds Layout
* Inside Layout we now should have 
  a. Toolbar, SideDrawer, Backdrop, Logo and NavigationItems
  b. BurgerBuilder
     b.1 BurgerBuilder should have Burger
          -> Burger will have BurgerIngredients
            -> BurgerIngredients will have individual BurgerIngredient
     b.2 BuildControls
          -> BuildControls will have individual BuildControl

Note : So far we have done till BuildControls (UI Of BuildControls). v0.1 tag in git starts from BuildControls
Next we will hookup BuildControls to state (video 163 - Connecting State to BuildControls)

* * * Tag v0.1 - Building the Burger

Set 2 Workflow as follows:

6. Added (My way to connect the state to BuildControls), and also disabled 'Less' btn if the ingredients are 0
7. Commented the functionalities : addIngredient, removeIngredient in each component which I had created (comments say - My way of ... )
8. Built the same functionalities in Max's way. I did this just to compare my way to his and make my building process better
  Note : I added a method countIngredients() in BurgerBuilder component to help remove ingredients. But when I saw Max's 
  explanation, I didn't feel the need to add this. So you can see the uncommented way of doing the same in removeIngredientHandler()
  Also, I felt disabled ingredient button functionality - My way is better than Max's way.

9. Added price functionality and also dispalyed in UI. It's pretty straight forward.
10. Now adding Order Now button in BuildControls component.
  * For this, it will also be good to disable this button if no ingredients are added. 
    Hence we make use of 'purchasable' property in BurgerBuilder state. If it's true then it is purchasable, else no.
  * Adding a method 'updatePurchaseState' which at the end is called in addIngredientHandler and removeIngredientHandler
    to check if the above added 'purchasable' property need to be updated after ingredient being added or removed
  * You can see the error (video 166. Adding order button), where the state of the ingredients is not up to date. 
    We got to know this when we needed to add two ingredients for the ORDER NOW button to become enabled. 
    Hence we passed the parameter of updated ingredients into updatePurchaseState(). 
  * Now, I wrote the Max's way of getting totalIngredients inside updatePurchaseState(). Refer that method for detail 
    explanation about map and reduce shown with and without return statement

11. Modal, Backdrop creation phase
  * Modal is a wrapper (container), shown in middle of the page. Inside this, we can show any component (props.children) as per our needs
  * Backdrop is used with Modal so that when the Backdrop is clicked, the modal disappears
  * Backdrop is not put inside Modal folder itself because, the backdrop can also be combined with sidedrawer (designed later)
  * WHERE TO ADD ? --> So, first develop the modal and then think which container/ component is the suitable place to add this modal,
    in our app it is BurgerBuilder container since it has state and other things there
  
12. Created OrderSummary
13. Dynamically showing OrderSummary Modal now. 
14. Created a Backdrop and added it to the Modal. We can add Backdrop anywhere like App or Layout, but then we
    need to make sure that we handle that properly by managing state etc..
    * But it makes more sense to place Backdrop inside Modal (For sidedrawer, its also suits to place backdrop in sidedrawer).
      This is because Modal is closely connected with Backdrop. When Modal opens or closes, then Backdrop also needs to open/close.
    * We also implement onClick in Backdrop because, as I said, if Modal closes then Backdrop should also close. Clicking BD should close both modal and BD.

15. Two buttons are now required to be present in OrderSummary. So it's better to create its own component. Hence created
    Button in UI folder. 

16. Now that we built the Button, and used two buttons (Continue and Cancel) in the OrderSummary, we now need to implement the onClick for them.
    Cancel Button is same as clicking backdrop so we can use purchaseCancelHandler (as backdrop) for that. We need to 
    implement Continue button click, and this will be purchaseContinueHandler. 
    * First we just give alert message in purchaseContinueHandler just so we know it's working. Later we will tweak it.

17. Adding the price in the OrderSummary before we move to build Toolbar


* * * Tag v0.2 - completed - build the burger, continue checkout or cancel. Now proceeding with the toolbar in the next version. Note: Continue button just shows alert for now. It's yet to be implemented

Set 3 Workflow as follows:

18. Design of Toolbar - We are going to add this component in Layout component. Toolbar resides in Navigation Folder.
    Other components like NavigationItems will also reside in Navigation component. (Refer point number 5 bullet points about Toolbar)
    * Note: BEST PRACTICE : The toolbar component should contain <header></header> with in which the other components like button(for sidedrawer),
          Logo, and navigation items should be. Navigation items inside the toolbar should be in <nav></nav>
    * Note: z-index for toolbar is 90, backdrop 100, sidedrawer is 200 and modal 500. First Modal, next backdrop, next sidedrawer and then toolbar. 
      We will see sidedrawer later.

19. Logo - Added from Max's resource file. In Logo.module.css, we set box-sizing:border-box. The meaning of this is - we
           need the height of the .Logo to be 80%, and we also need padding to be the part of this. That is the meaning of
           box-sizing:border-box
           
20. Now we need to do the navigation items which go into the <nav></nav> in the toolbar. We need to outsource this because 
    we will be using it again in the sidedrawer. NavigationItems component is created for this and then NavigationItem is created.

21. Now that we added Navigation to toolbar (desktop), it's time to add Navigation to mobile devices and that is by sidedrawer component. Now 
    we added SidDrawer but the logo looks big. So logo and navigation items need to be taken care of, so we next include
    responsive css to NavigationItem.

    Note: So the problem at this point is that, the logo is bigger in sidedrawer. The reason is, in the Logo css, we 
    set height of logo to 80% to look good in the toolbar. But the same logo component when used in the sidedrawer looks
    way to bigger due to its 80% height. 
    So the 80% height is ok for toolbar and not to the sidedrawer. The thing to observe here is that we are kind of 
    favouring toolbar and not the sidedrawer in the logo css. So two things we can do here: 

    1. Make the logo responsive. For bigger screen, it should be 80% (sits on the toolbar) and smaller height for sidedrawer.
    2. Set the logo height back to 100% and then change its height in toolbar css and sidedrawer css. So, that means,
       we are actually setting the height of the logo when in toolbar or sidedrawer when those components are used accordingly.
  
   Here we are following second approach which I think makes more sennse as the logo can then be generic in logo css.
   In conclusion, we reset logo height both in sidedrawer as well as toolbar accordingly. REFER Video 177. Working on Responsive Adjustments to understand this

22. Now taking care of navigation items to look good on mobile devices (responsive css for NavigationItems). We are making 
    this in Mobile first way.

23. Now adding Backdrop to the SidDrawer component. We need an onClick listener of backdrop come back to sidedrawer which 
    inturn should come back to Layout. We can handle this click in SidDrawer itself which comes from backdrop, but 
    Layout would be the appropriate component to handle this click listener because we need a connection between 
    the toolbar and sidedrawer at the end. That is because when the menu button in the toolbar is clicked, then only
    the sidedrawer should open. So, the component which holds toolbar and sidedrawer is the layout. So we add 
    SidDrawer component's Backdrop's click listener in Layout.

    In this commit we also added hamburger icon component (DrawerToggle) and placed this in SidDrawer component. This is 
    the replacement of MENU text in the toolbar. The reason for placing this in the sidedrawer component is that it 
    actually belongs to the sidedrawer even though it resides on toolbar, because this button is mainly used for 
    showing or hiding sidedrawer.

24. Added Max's css for DrawerToggle
25. Performance Optimizations : One thing at this point if you notice; the modal simply is rendered everytime
    even though we don't click Order Now btn. The reason for this is, the render method of BurgerBuilder is run everytime
    if something on the BurgerBuilder changes, for example, if I add a component, the BurgerIngredient is added and hence 
    the Burger part changes and hence the BurgerBuilder changes. When the BurgerBuilder is changed the BurgerBuilder's
    render is run again. When this happens, the Modal (also OrderSummary inside Modal) is run everytime.

    So, to summarize, when BurgerIngredient is added/removed the Modal is rendered because it resides in render of BurgerBuilder
    which changes when this happens. This is a performance hit. To avoid this we use shouldComponentUpdate. This shouldComponentUpdate
    can be used in two places - Modal or OrderSummary. But the right place is Modal because it is the one which wraps 
    OrderSummary. So I would convert Modal into class based (can be done with react hooks later) and implement shouldComponentUpdate.

   * What is PureComponent (class based) or React Memo (react hooks based)? 
   
   PureComponent/React Memo is shouldComponentUpdate functionality but it compares all the previous props with the present props.
   It's needed sometimes but not all the times. Here in the Modal we could have used it but its an overkill because we have
   only one prop that is show prop which needs to be compared, and this alone would be enough to tell if the Modal needs
   to be rendered or not. Hence using PureComponent here in Modal is not necessary.

26. Modifying the folder structure a bit: When we started the project, the Layout was a stateless component but now 
    it handles state. So for a moment we feel its better to move this folder into Containers. But if we take a closer 
    look at Layout, all it does is just Wraps the props.children (BurgerBuilder for now and other compoents like Authentication Page later),
    and it also has fixed Toolbar and SidDrawer. So, the main focus is that it wraps the children and hence we can consider
    this to be a higher order component. Moving Layout into hoc folder makes more sense, but its not mandatory. 
    I am moving it into hoc here.

    We are DONE WITH THE CRUCIAL BASE PART OF BURGER BUILDER



* * * Tag v1.0-release - completed - COMPLETED BASE PART. BURGERBUILDER, TOOLBAR, SIDDRAWER, MODAL, ORDERSUMMARY all done. 

Set 4 Workflow as follows:

 Implementing Backend - Firebase - When we click Order Now button, the Orders should go and store in firebase

27. Watch video for steps to create project on firebase console. No point in noting them here. (Video 209 - Creating the Firebase project)
    Once you setup the database, in the rules part, set read and write to true. This can be changed once authentication is implemented.

    DB URL : https://react-my-burger-664c0.firebaseio.com/

28. Now that we have setup the Database, we'll send http request now using library called axios.
    npm install --save axios. We can use axios two ways. One is globally and other way is using axios instance.
    Here we use axios instance. So I'll create axios-orders.js file in src folder and create axios instance for orders here.

   Creating axios instance : 

    * First we create instance of axios using axios.create() and assign baseURL inside. 
    * Assign this function to a variable and export that as default.
  
  Later in the course, we use a different URL for authentication hence we now created an instance.